---

# Run mysql_secure_installation if it was not run
- name: Check a flag that means mysql_secure_installation.yml was finished
  stat:
    path: /root/.keystone_database_was_initialized
  register: flag_file

- include: initialize_keystone_database.yml
  when: not flag_file.stat.exists

- name: Create a flag that means initialize_keystone_database.yml was finished
  copy:
    content: ""
    dest: /root/.keystone_database_was_initialized
    force: no
    owner: root
    group: root
    mode: '0640'

- name: Install packages of keystone
  apt:
    name:
      - keystone

- name: Configure keystone.conf
  ansible.builtin.template:
    src: keystone/keystone.conf.j2
    dest: /etc/keystone/keystone.conf
    owner: keystone
    group: keystone
    mode: '0640'

- name: Sync keystone DB
  ansible.builtin.command:
    argv:
      - su
      - -s
      - /bin/sh
      - -c
      - "keystone-manage db_sync"
      - "{{ group_vars.keystone.user }}"

# Command `keystone-manage fernet_setup` is idempotent
- name: Initialize Fernet key repositories with keystone-manage fernet_setup
  ansible.builtin.command:
    argv:
      - keystone-manage
      - fernet_setup
      - --keystone-user
      - "{{ group_vars.keystone.user }}"
      - --keystone-group
      - "{{ group_vars.keystone.group }}"

# Command `keystone-manage credential_setup` is idempotent
- name: Initialize Fernet key repositories with keystone-manage credential_setup
  ansible.builtin.command:
    argv:
      - keystone-manage
      - credential_setup
      - --keystone-user
      - "{{ group_vars.keystone.user }}"
      - --keystone-group
      - "{{ group_vars.keystone.group }}"

# Command `keystone-manage bootstrap` is idempotent
- name: Bootstrap the Identity service
  ansible.builtin.command:
    argv:
      - keystone-manage
      - bootstrap
      - --bootstrap-password
      - '{{ group_vars.keystone.password }}'
      - --bootstrap-admin-url
      - http://{{ inventory_hostname }}:5000/v3/
      - --bootstrap-internal-url
      - http://{{ inventory_hostname }}:5000/v3/
      - --bootstrap-public-url
      - http://{{ inventory_hostname }}:5000/v3/
      - --bootstrap-region-id
      - "{{ group_vars.openstack.region.name }}"

- name: Set ServerName in apache2 config
  ansible.builtin.template:
    src: templates/apache2/sites-available/000-default.conf.j2
    dest: /etc/apache2/sites-available/000-default.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart apache2

- name: Run notified handler of apache2
  meta: flush_handlers

# This instruction assumes environment variables in order to authenticate the endpoint are already declared at controllers.yml.
- include: create_domain.yml

##

#- name: Print the result of openstack domain list
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
## Creating a project service
#- name: Create a project named "service" in "default" domain
#  ansible.builtin.command:
#    argv: ["openstack", "project", "create", "--domain", "default", "--description", "Service Project", "service"]
#  register: result
#
#- name: Print the result of creating a project "service"
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
## Optional: Create a project "myproject"
#- name: Create a project named "myproject" in "default" domain
#  ansible.builtin.command:
#    argv: ["openstack", "project", "create", "--domain", "default", "--description", "Demo Project", "myproject"]
#  register: result
#
#- name: Print the result of creating a project "myproject"
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
## List all created projects
#- name: List all created projects
#  ansible.builtin.command:
#    argv: ["openstack", "project", "list", "--long", "--domain", "default"]
#  register: result
#
#- name: Print all created projects
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
## Create a user in domain
#- name: Create a user "myuser" in a domain "default"
#  ansible.builtin.command:
#    argv: ["openstack", "user", "create", "--domain", "default", "--password=secret", "myuser"]
#  register: result
#- name: Print a result of creating a user
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
#- name: List users in a domain "default"
#  ansible.builtin.command:
#    argv: ["openstack", "user", "list", "--domain", "default", "--long"]
#  register: result
#- name: Print all created users
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
## Create a role
#- name: Create a role "myrole"
#  ansible.builtin.command:
#    argv: ["openstack", "role", "create", "myrole"]
#  register: result
#- name: Print a result of creating a role
#  ansible.builtin.debug:
#    msg: "{{ result.stdout.split('\n') }}"
#
## Add a role to a user and group
#- name: Add a role to a user "myuser" and a group "myproject"
#  ansible.builtin.command:
#    argv: ["openstack", "role", "add", "--project", "myproject", "--user", "myuser", "myrole"]

