---
- name: Declare a group_name to format volumes
  set_fact:
    group_name: "{{ group_names[0] }}"

- name: Declare target_storage_instance to format volumes for storage nodes (swift, cinder etc).
  #ansible.builtin.debug:
  #  msg: "inventory_hostname => {{ inventory_hostname }}, storage.swift => {{ aaa.storage.swift }}"
  set_fact:
    target_storage_instance: "{{ tmp_target_storage_instance }}"
  loop_control:
    loop_var: tmp_target_storage_instance
  with_items: "{{ group_vars.hosts[group_name] }}"
  when: tmp_target_storage_instance.name == inventory_hostname

- name: Declare an empty variable option_type_of_storage
  set_fact:
    option_type_of_storage: []

- name: Set a variable option_type_of_storage
  set_fact:
    options_of_type: "{% if inventory_hostname | regex_search('^.*storage[0-9]+.*$') -%}
                                  {{ option_type_of_storage + ['--type', 'storage'] }}
                                {% elif inventory_hostname | regex_search('^.*cinder[0-9]+.*$') -%}
                                  {{ option_type_of_storage + ['--type', 'cinder'] }}
                                {% elif inventory_hostname | regex_search('^.*swift[0-9]+.*$') -%}
                                  {{ option_type_of_storage + ['--type', 'swift'] }}
                                {% endif %}"

- name: Declare an empty variable option_swift_volumes
  set_fact:
    option_swift_volumes: []

- name: Set the variable option_swift_volumes
  set_fact:
    option_swift_volumes: "{{ option_swift_volumes + [\"--swift-volume\", tmp_option_swift_volume] }}"
  loop_control:
    loop_var: tmp_option_swift_volume
  with_items: "{{ target_storage_instance.storage.swift }}"
  when: '"swift" in target_storage_instance.storage'

- name: Declare an empty variable option_cinder_volumes
  set_fact:
    option_cinder_volumes: []

- name: Set the variable option_cinder_volumes
  set_fact:
    option_cinder_volumes: "{{ option_cinder_volumes + [\"--cinder-volume\", tmp_option_cinder_volume] }}"
  loop_control:
    loop_var: tmp_option_cinder_volume
  with_items: "{{ target_storage_instance.storage.cinder }}"
  when: '"cinder" in target_storage_instance.storage'

- name: Faaaaaaaaaaaaaaaaaaaaail
  ansible.builtin.fail:
    msg: "Faaaaaaaaaaaaaaaaaaaaail. options_of_type => {{ options_of_type }}, option_swift_volumes => {{ option_swift_volumes }}, option_cinder_volumes => {{ option_cinder_volumes }}"


#- name: Declare options of devices for Swift nodes
#  with_items:


#- name: Declare options of devices for Cinder nodes
#  with: items

#- name: "Copy format_volumes.sh to \"/opt/format_volumes.sh\" on {{ inventory_hostname }}"
#  ansible.builtin.copy:
#    src: format_volumes.sh
#    dest: /opt/format_volumes.sh
#    owner: root
#    group: root
#    mode: '0750'

#- name: "Format volumes that has a role for storage (hostname={{ inventory_hostname }}, options={{ options_of_format_volumes }})"
#  ansible.builtin.script: ./format_volumes.sh {{ options_of_format_volumes }}
- name: "Format volumes that has a role for storage (hostname={{ inventory_hostname }}, options={{ options_of_format_volumes }})"
  ansible.builtin.script: ./format_volumes.sh {{ options_of_format_volumes | join(' ') }}


