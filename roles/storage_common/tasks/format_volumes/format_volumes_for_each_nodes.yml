---
# TODO: Should this variable declared in another variable file?
- name: Declare available groups for storages like Swift, Cinder etc
  set_fact:
    available_format_groups: ["swifts", "cinders", "storages"]

- name: Declare a primary_group_name for getting target host elements
  set_fact:
    primary_group_name: "{{ available_format_groups | select('in', group_names) | first }}"

- name: Declare target_storage_instance to format volumes for storage nodes (swift, cinder etc).
  set_fact:
    target_storage_instance: "{{ tmp_target_storage_instance }}"
  loop_control:
    loop_var: tmp_target_storage_instance
  with_items: "{{ group_vars.hosts[primary_group_name] }}"
  when: tmp_target_storage_instance.name == inventory_hostname

- name: "Check whether a current host {{ inventory_hostname }} is belonging in a group_vars.hosts[\"primary_group_name\"]"
  ansible.builtin.fail:
    msg: "Failed."
  when: target_storage_instance is not defined

- name: Declare an empty variable options_of_type
  set_fact:
    options_of_type: []

- name: Set a variable options_of_type
  set_fact:
    options_of_type: "{% if inventory_hostname | regex_search('^.*storage[0-9]+.*$') -%}
                                  {{ options_of_type + ['--type', 'storage'] }}
                                {% elif inventory_hostname | regex_search('^.*cinder[0-9]+.*$') -%}
                                  {{ options_of_type + ['--type', 'cinder'] }}
                                {% elif inventory_hostname | regex_search('^.*swift[0-9]+.*$') -%}
                                  {{ options_of_type + ['--type', 'swift'] }}
                                {% endif %}"

- name: Declare an empty variable option_swift_volumes
  set_fact:
    option_swift_volumes: []

- name: Set the variable option_swift_volumes
  set_fact:
    option_swift_volumes: "{{ option_swift_volumes + [\"--swift-volume\", tmp_option_swift_volume] }}"
  loop_control:
    loop_var: tmp_option_swift_volume
  with_items: "{{ target_storage_instance.storage.swift }}"
  when: '"swift" in target_storage_instance.storage'

- name: Declare an empty variable option_cinder_volumes
  set_fact:
    option_cinder_volumes: []

- name: Set the variable option_cinder_volumes
  set_fact:
    option_cinder_volumes: "{{ option_cinder_volumes + [\"--cinder-volume\", tmp_option_cinder_volume] }}"
  loop_control:
    loop_var: tmp_option_cinder_volume
  with_items: "{{ target_storage_instance.storage.cinder }}"
  when: '"cinder" in target_storage_instance.storage'

- name: "Copy format_volumes.sh to \"/opt/format_volumes.sh\" on {{ inventory_hostname }}"
  ansible.builtin.copy:
    src: format_volumes.sh
    dest: /opt/format_volumes.sh
    owner: root
    group: root
    mode: '0750'

- name: Error if the option --type is empty for format_volumes.sh
  ansible.builtin.fail:
    msg: "ERROR: Failed to format volumes for storage nodes. The option --type to format volumes for storage nodes is empty."
  when: 'options_of_type | length <= 0'

- name: Error if both of the option --swift-volume and --cinder-volume are empty
  ansible.builtin.fail:
    msg: "ERROR: Failed to format volumes for storage nodes. Both the option --swift-volume and --cinder-volume for storage nodes are empty."
  when: '(option_swift_volumes | length <= 0) and (option_cinder_volumes | length <= 0)'

- name: Set variable options_of_format_volumes
  set_fact:
    options_of_format_volumes: "{{ options_of_type + option_cinder_volumes + option_swift_volumes }}"

- name: "Format volumes that has a role for storage (hostname={{ inventory_hostname }}, options={{ options_of_format_volumes }})"
  ansible.builtin.script: ./format_volumes.sh {{ options_of_format_volumes | join(' ') }}

