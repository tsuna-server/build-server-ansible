---
- name: Set constant variable to handle swift servers
  set_fact:
    const_swift_object_servers: "[{'name': 'account', 'port': '6202'}, {'name': 'container', 'port': '6201'}, {'name': 'object', 'port': '6200'}]"

# A variable target_storage_nodes will be used when creating a ring for Swift.
- name: Declare target_storage_nodes
  set_fact:
    target_storage_nodes: []

- name: Join target_storage_nodes with group_vars.hosts.swifts
  set_fact:
    target_storage_nodes: "{{ target_storage_nodes + group_vars.hosts.swifts }}"
  when: "'swifts' in group_vars.hosts"

- name: Join target_storage_nodes with group_vars.hosts.storages
  set_fact:
    target_storage_nodes: "{{ target_storage_nodes + group_vars.hosts.storages }}"
  when: "'storages' in group_vars.hosts"

- name: Join target_storage_nodes with group_vars.hosts.comstorages
  set_fact:
    target_storage_nodes: "{{ target_storage_nodes + group_vars.hosts.comstorages }}"
  when: "'comstorages' in group_vars.hosts"

- name: A block to build Swift for controller(Swift proxy) nodes.
  block:
    - name: Include create_service/main.yml
      include_tasks: create_service/main.yml

    - name: Include create_endpoint/main.yml
      include_tasks: create_endpoint/main.yml

    - name: Include install_packages/swift_proxy/main.yml
      include_tasks: install_packages/swift_proxy/main.yml

    # This instruction assumes that swift_proxy is in controller node.
    # Ofcurse, you can separate controller and swift_proxy node.
    - name: Include create_proxy_server/main.yml
      include_tasks: create_proxy_server/main.yml

    - name: Include create_rings/main.yml
      include_tasks: create_rings/main.yml

    - name: Include prepare_swift_conf/swift_proxy/main.yml
      include_tasks: prepare_swift_conf/swift_proxy/main.yml

    # This instruction requires a the variable "const_swift_object_servers".
    - name: Include fetch_ring_files/main.yml
      include_tasks: fetch_ring_files/main.yml
  when: "'controllers' in group_names"

- name: A block to build Swift storage nodes.
  block:
    - name: Declare target_swift_nodes
      set_fact:
        target_swift_nodes: []

    - name: "Declare tmp_swift_nodes and tmp_storage_nodes"
      set_fact:
        tmp_swift_nodes: "{{ group_vars.hosts['swifts'] | default([]) }}"
        tmp_storage_nodes: "{{ group_vars.hosts['storages'] | default([]) }}"

    - name: "Join nodes of swifts ant storages(tmp_all_swift_nodes = tmp_swift_nodes + tmp_storage_nodes)"
      set_fact:
        tmp_all_swift_nodes: "{{ tmp_swift_nodes + tmp_storage_nodes }}"

    # This instruction can not use "first" at here because "selectattr" will return dict not array.
    - name: "Declare config_element_of_swift"
      set_fact:
        config_element_of_swift: '{{ tmp_all_swift_nodes | selectattr("name", "eq", inventory_hostname) }}'

    - name: "Failed if there is no element of the config for Swift node \"{{ inventory_hostname }}\"."
      ansible.builtin.fail:
        msg: "Failed if there is no element of the config for Swift node \"{{ inventory_hostname }}\"."
      when: config_element_of_swift | length <= 0

    - name: "Get a first element of config_element_of_swift"
      set_fact:
        config_element_of_swift: "{{ config_element_of_swift | first }}"

    - name: "Debug config_element_of_swift for the node."
      ansible.builtin.debug:
        msg: "config_element_of_swift -> {{ config_element_of_swift }}, inventory_hostname => {{ inventory_hostname }}"

    - name: Include install_packages/swift/main.yml
      include_tasks: install_packages/swift/main.yml

    - name: Include create_swift_storage_node/main.yml
      include_tasks: create_swift_storage_node/main.yml

    - name: Include setting_rsyncd/main.yml
      include_tasks: setting_rsyncd/main.yml

    - name: Include setting_swift_server/main.yml
      include_tasks: setting_swift_server_components/main.yml

    - name: Include setting_internal_client_conf/main.yml
      include_tasks: setting_internal_client_conf/main.yml

    - name: Include setting_permissions/swift/main.yml
      include_tasks: setting_permissions/swift/main.yml

    - name: Include prepare_swift_conf/swift/main.yml
      include_tasks: prepare_swift_conf/swift/main.yml

    - name: "Include push_ring_files/main.yml"
      include_tasks: push_ring_files/main.yml

    # TODO: Theese services sometimes running already for some reason.
    #       And it will cause an error when the dommand "swift-init all start" was run.
    #       Then stop these services 
    #
    # A command "swift-init all start" will fail if swift-proxy-server has already started. Then stop it manually.
    #- name: "swift-proxy should not be started before the command \"swift-init all start\" has run."
    #  ansible.builtin.service:
    #    name: swift-proxy
    #    state: stopped
    # A command "swift-init all start" will fail if swift-proxy-server has already started. Then stop it manually.
    - name: "{{ item }} should not be started before the command \"swift-init all start\" has run."
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
      loop:
        - swift-object
        - swift-container
        - swift-account

    - name: "Start all Swift services on Swift node"
      command: swift-init all start

  when: "('swifts' in group_names) or ('storages' in group_names) or ('comstorages' in group_names)"
