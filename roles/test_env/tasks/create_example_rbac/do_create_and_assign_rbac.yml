---
# Variables
#   rbac_action:
#     A name of action in the RBAC.
#   rbac_domain:
#     A domain that contains its name(domain.name), projects(domain.projects), description(domain.description) etc for RBACs.
#   rbac_project:
#     A project that contains its name and networks for RBACs.
#   rbac_network:
#     A network that contains its name and actions for RBACs.
#
#   rbac_network_id:
#     A network id for the network that the RBAC will be applied.
#   rbac_project_id:
#     A project id for the network that the RBAC will be applied.

# TODO: Create and assign Role based Access Control(rbac) to a project.
- name: Print a RBAC that will be added
  ansible.builtin.debug:
    msg: "An information of RBAC will be added: domain.name={{ rbac_domain.name }}, project.name={{ rbac_project.name }}(ID:{{ rbac_project_id }}), network.name={{ rbac_network.name }}(ID:{{ rbac_network_id }}), action={{ rbac_action }}"

- name: Create RBAC
  ansible.builtin.command:
    argv: ["openstack", "network", "rbac", "create", "--target-project", "{{ rbac_project_id }}", "--type", "network", "--action", "{{ rbac_action }}", "{{ rbac_network_id }}"]
  register: result
  # Succeeded when ...
  #  * Return code is 0
  #  * Or return code is 1 and " An RBAC policy ... values." in stderr
  # Testing
  #  * When return code is 0 and any stderr:                              (false and (true  or true ))    => false ... Success
  #  * When return code is 1 and stderr is " An RBAC policy ... values.": (true  and (false or false))  => false ... Success
  #  * When return code is 2:                                             (true  and (true  or true ))     => true ... Success
  failed_when: '(result.rc != 0) and (result.rc != 1 or " An RBAC policy already exists with those values." not in result.stderr)'

