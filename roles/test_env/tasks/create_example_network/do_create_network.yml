---
# This instruction assumes a variable `network` was already declared.
#   network.name:
#     Network name that will be created in this section
#   network.mtu (optional):
#     Maximum transmission unit(MTU) in the network.
#     1450 will be applied by default if it was not declared.

- name: Determine MTU of the network
  set_fact:
    mtu: "{% if 'mtu' in network %}{{ network.mtu }}{% else %}1450{% endif %}"

- name: Print a network that will be created in this section
  ansible.builtin.debug:
    msg: "network.name == \"{{ network.name }}\", network.mtu == \"{{ mtu }}\""

- name: Check the network has already existed or not
  ansible.builtin.script: ./check_duplicate_network.sh "{{ network.name }}"
  register: result_of_checking_network
  failed_when: ( result_of_checking_network.rc not in [0, 1] )

- name: Block of create network
  block:
    # Add an external option if a configuration of the network indicate as external
    - name: Determine the network is indicated whether external or not
      set_fact:
        is_external: "{% if 'external' in network and network.external == True %}True{% else %}False{% endif %}"

    - name: Create a network as private
      ansible.builtin.command:
        argv: ["openstack", "network", "create", "--mtu", "{{ mtu }}", "{{ network.name }}"]
      register: result_of_create_network
      when: is_external == False

    - name: Deeeeeeeeeeeeeeeeeeeeeeeeeeeeebug
      ansible.builtin.debug:
        msg: result_of_create_network

    - name: Create a network as external
      ansible.builtin.command:
        argv: ["openstack", "network", "create", "--provider-network-type", "flat", "--mtu", "{{ mtu }}", "--provider-physical-network", "provider", "--external", "{{ network.name }}"]
      register: result_of_create_network
      when: is_external == True

    - name: Deeeeeeeeeeeeeeeeeeeeeeeeeeeeebug
      ansible.builtin.debug:
        msg: result_of_create_network

    - name: Print the result of creating network
      ansible.builtin.debug:
        msg: "{{ result.stdout.split('\n') }}"

    - name: Get network list
      ansible.builtin.command:
        argv: ["openstack", "network", "list"]
      register: result

    - name: Print the result of list network
      ansible.builtin.debug:
        msg: "{{ result.stdout.split('\n') }}"
  when: result_of_checking_network.rc == 0
