---
# openstack_service
- name: Declare variables db_name, db_user and db_password
  set_fact:
    db_name: "{{ db.name }}"
    db_user: "{% if 'user' in db %}{{ db.user }}{% else %}{{ group_vars[openstack_service_name].user }}{% endif %}"
    db_password: "{% if 'password' in db %}{{ db.password }}{% else %}{{ group_vars[openstack_service_name].password }}{% endif %}"

- name: Print the tables information that this script going to create
  ansible.builtin.debug:
    msg: "db.name={{ db_name }}, db_user={{ db_user }}, db_password={{ db_password }}"

- name: Create DB if it was not exsited for each service
  ansible.builtin.command:
    argv:
      - mysql
      - -e
      - "CREATE DATABASE IF NOT EXISTS {{ db_name }};"

- name: Check whether a privilege of the user at localhost was existed
  ansible.builtin.script: ./check_duplicate_privilege_on_db.sh "{{ db_name }}" "{{ db_user }}" "localhost"
  register: result_of_checking
  failed_when: ( result_of_checking.rc not in [0, 1] )

- name: Grant privileges to resources on each service DB for a user at localhost
  ansible.builtin.command:
    argv:
      - mysql
      - -e
      - "GRANT ALL PRIVILEGES ON {{ db_name }}.* TO '{{ db_user }}'@'localhost' IDENTIFIED BY '{{ db_password }}';"
  when: result_of_checking.rc == 0

- name: Check whether a privilege of the user at remote host was existed
  ansible.builtin.script: ./check_duplicate_privilege_on_db.sh "{{ db_name }}" "{{ db_user }}" "%"
  register: result_of_checking
  failed_when: ( result_of_checking.rc not in [0, 1] )

- name: Grant privileges to resources on keystone database for a user keystone at remote host
  ansible.builtin.command:
    argv:
      - mysql
      - -e
      - "GRANT ALL PRIVILEGES ON {{ db_name }}.* TO '{{ db_user }}'@'%' IDENTIFIED BY '{{ db_password }}';"
