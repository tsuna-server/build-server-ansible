---
# Parameters:
#
# * openstack_service_name (type String)
#   A service name of OpenStack service. eg) "glance", "placement" etc.
#
# * service_interface (type String)
#   Service interface of endpoint. eg) "public", "internal", "admin".
#

- name: Declare variables to create an endpoint
  set_fact:
    region_name: "{% if 'name' in region %}{{ region.name }}{% else %}{{ group_vars[openstack_service_name].endpoints.default.regions[0].name }}{% endif %}"
    endpoint_url: "{% if 'url' in region %}{{ region.url }}{% else %}{{ group_vars[openstack_service_name].endpoints.default.regions[0].url }}{% endif %}"
    service_type: "{{ group_vars[openstack_service_name].service.type }}"

- name: Check the endpoint is already existed or not
  ansible.builtin.script: ./check_duplicate_endpoint.sh "{{ region_name }}" "{{ openstack_service_name }}" "{{ service_type }}" "{{ service_interface }}"
  register: result_of_checking
  failed_when: ( result_of_checking.rc not in [0, 1] )

- name: Block of creating an endpoint
  block:
    - name: Debug print endpoint that will be created
      ansible.builtin.debug:
        msg: "Creating endpoint - region_name={{ region_name }} openstack_service_name={{ openstack_service_name }}, service_type={{ service_type }}, service_interface={{ service_interface }}, endpoint_url={{ endpoint_url }}"
    - name: Create an endpoint
      ansible.builtin.command:
        argv: ["openstack", "endpoint", "create", "--region", "{{ region_name }}", "{{ service_type }}", "{{ service_interface }}", "{{ endpoint_url }}"]
  when: result_of_checking.rc == 0

